{
  "stats": {
    "suites": 4,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-27T11:05:20.848Z",
    "end": "2023-02-27T11:05:21.049Z",
    "duration": 201,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5d6ea63c-85df-46dd-9e95-236445c05750",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56ba4374-192d-4359-bcb9-3765c5da2400",
          "title": "create new User ",
          "fullFile": "/home/rom/Documents/dev/express/mocha-chai-unitTest/server/app/test/create_user.js",
          "file": "/app/test/create_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new User",
              "fullTitle": "create new User  should create a new User",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.post(`${API_URL}/api/postuserInfo`, newUser)\nexpect(response.status).to.be.equal(201)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "7ca2f7d7-786c-4d81-bd6b-cef33a7d3a51",
              "parentUUID": "56ba4374-192d-4359-bcb9-3765c5da2400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT create a new User without name",
              "fullTitle": "create new User  should NOT create a new User without name",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const newUserCpy = {...newUser}\n    delete newUserCpy.name\n    const response = await axios.post(`${API_URL}/api/postuserInfo`, newUserCpy)\n    expect(response.status).not.to.be.equal(201)\n    expect(response.status).not.to.be.an(\"object\")\n} catch (error) {\n    if(error.response){\n        expect(error.response.status).to.be.equal(422)\n    }else{\n        throw error\n    }\n}",
              "err": {},
              "uuid": "7c645810-9cfd-449a-893c-54e3285c6af0",
              "parentUUID": "56ba4374-192d-4359-bcb9-3765c5da2400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT create a new User without email",
              "fullTitle": "create new User  should NOT create a new User without email",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const newUserCpy = {...newUser}\n    delete newUserCpy.email\n    const response = await axios.post(`${API_URL}/api/postuserInfo`, newUserCpy)\n    expect(response.status).not.to.be.equal(201)\n    expect(response.status).not.to.be.an(\"object\")\n} catch (error) {\n    if(error.response){\n        expect(error.response.status).to.be.equal(422)\n    }else{\n        throw error\n    }\n}",
              "err": {},
              "uuid": "106ef9b4-b619-435b-8dd5-af444dc4f285",
              "parentUUID": "56ba4374-192d-4359-bcb9-3765c5da2400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT create a new User without age",
              "fullTitle": "create new User  should NOT create a new User without age",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const newUserCpy = {...newUser}\n    delete newUserCpy.age\n    const response = await axios.post(`${API_URL}/api/postuserInfo`, newUserCpy)\n    expect(response.status).not.to.be.equal(201)\n    expect(response.status).not.to.be.an(\"object\")\n} catch (error) {\n    if(error.response){\n        expect(error.response.status).to.be.equal(422)\n    }else{\n        throw error\n    }\n}",
              "err": {},
              "uuid": "dc8bb528-b4e0-49b5-bb64-601c06eed72b",
              "parentUUID": "56ba4374-192d-4359-bcb9-3765c5da2400",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ca2f7d7-786c-4d81-bd6b-cef33a7d3a51",
            "7c645810-9cfd-449a-893c-54e3285c6af0",
            "106ef9b4-b619-435b-8dd5-af444dc4f285",
            "dc8bb528-b4e0-49b5-bb64-601c06eed72b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53eb6ee2-1052-4db2-827e-99afe2f1628d",
          "title": "Delete User",
          "fullFile": "/home/rom/Documents/dev/express/mocha-chai-unitTest/server/app/test/delete_user.test.js",
          "file": "/app/test/delete_user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Delete User\"",
              "fullTitle": "Delete User \"before each\" hook in \"Delete User\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "targetUser = await createUser()",
              "err": {},
              "uuid": "275f3ea7-6434-4fc6-a1c6-4bc6cfff73a4",
              "parentUUID": "53eb6ee2-1052-4db2-827e-99afe2f1628d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete Single User",
              "fullTitle": "Delete User delete Single User",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('delete Single User : ', targetUser._id)\nconst response = await axios.delete(`${API_URL}/api/deleteuser/${targetUser._id}`)\nexpect(response.status).to.be.equal(200)\nexpect(response.data).to.be.an('object')\nexpect(response.data._id).to.be.equal(targetUser._id)",
              "err": {},
              "uuid": "a4adedc2-974f-4391-9dbe-09df9c8da13f",
              "parentUUID": "53eb6ee2-1052-4db2-827e-99afe2f1628d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4adedc2-974f-4391-9dbe-09df9c8da13f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b0a786ee-9759-46c4-a1ed-12dd5ef551f9",
          "title": "Get User infos",
          "fullFile": "/home/rom/Documents/dev/express/mocha-chai-unitTest/server/app/test/get_user.test.js",
          "file": "/app/test/get_user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get User infos\"",
              "fullTitle": "Get User infos \"before all\" hook in \"Get User infos\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "targetUser = await createUser()",
              "err": {},
              "uuid": "3956f54b-1952-40ef-8714-bfa7d81a2c68",
              "parentUUID": "b0a786ee-9759-46c4-a1ed-12dd5ef551f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get All users list",
              "fullTitle": "Get User infos should get All users list",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${API_URL}/api/getuserInfo`);\nconst { data } = response;\nexpect(response.status).to.be.equal(200);\nexpect(data).to.be.an(\"object\");",
              "err": {},
              "uuid": "16fe1ed6-5bea-433d-aa9b-a7652ce505d5",
              "parentUUID": "b0a786ee-9759-46c4-a1ed-12dd5ef551f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should post a new user",
              "fullTitle": "Get User infos should post a new user",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.post(`${API_URL}/api/postuserInfo`,newUser)\nexpect(response.status).to.be.equal(201)\nexpect(response.data).to.be.an('object')",
              "err": {},
              "uuid": "71f61e7f-0abd-44c6-b704-26e27d0f5467",
              "parentUUID": "b0a786ee-9759-46c4-a1ed-12dd5ef551f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a single user with an Id",
              "fullTitle": "Get User infos should get a single user with an Id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const targetId = targetUser._id\nconst response = await axios.get(`${API_URL}/api/singleuser/${targetId}`);\nconst foundUser = response.data.foundUser\nexpect(response.status).to.be.equal(200)\nexpect(foundUser).to.be.an('object')\nexpect(targetUser._id).to.be.equal(foundUser._id)",
              "err": {},
              "uuid": "d0c008de-282c-4988-835f-3e0ed38f2f15",
              "parentUUID": "b0a786ee-9759-46c4-a1ed-12dd5ef551f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have all properties in each user",
              "fullTitle": "Get User infos should have all properties in each user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const targetId = targetUser._id\nconst {data} = await axios.get(`${API_URL}/api/singleuser/${targetId}`);\nconst foundUser = data.foundUser\nexpect(foundUser).to.be.an('object')\nexpect(foundUser).to.have.property('name')\nexpect(Object.keys(foundUser)).to.include.members(['name','date','email'])\nexpect(targetUser.name).to.be.equal(foundUser.name)",
              "err": {},
              "uuid": "60d4852b-97b1-4068-92b8-4a653e3900f5",
              "parentUUID": "b0a786ee-9759-46c4-a1ed-12dd5ef551f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16fe1ed6-5bea-433d-aa9b-a7652ce505d5",
            "71f61e7f-0abd-44c6-b704-26e27d0f5467",
            "d0c008de-282c-4988-835f-3e0ed38f2f15",
            "60d4852b-97b1-4068-92b8-4a653e3900f5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
          "title": "update user",
          "fullFile": "/home/rom/Documents/dev/express/mocha-chai-unitTest/server/app/test/update_user.js",
          "file": "/app/test/update_user.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"update user\"",
              "fullTitle": "update user \"before each\" hook in \"update user\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "targetUser = await createUser()",
              "err": {},
              "uuid": "986764e8-f835-473f-8ee5-235629782863",
              "parentUUID": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"update user\"",
              "fullTitle": "update user \"after each\" hook in \"update user\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteUser(targetUser._id)",
              "err": {},
              "uuid": "a24303f1-508c-4151-a5c8-45901801dd36",
              "parentUUID": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should update a user - everything",
              "fullTitle": "update user should update a user - everything",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.put(`${API_URL}/api/updateinfo/${targetUser._id}`,updateUserData)\nconst updatedUser = response.data\n\nexpect(response.status).to.be.equal(201)\nexpect(updatedUser).to.be.an('object')\nexpect(updatedUser._id).to.be.equal(targetUser._id)\nconst result = Object.keys(updateUserData).every(key=>updatedUser[key]===updateUserData[key])\nexpect(result).to.be.equal(true)",
              "err": {},
              "uuid": "ccbd88ed-4691-4cec-a1dd-d29a62044d8c",
              "parentUUID": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user - name",
              "fullTitle": "update user should update a user - name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { name } = updateUserData\nconst response = await axios.put(`${API_URL}/api/updateinfo/${targetUser._id}`,{name})\nconst updatedUser = response.data\n\nexpect(response.status).to.be.equal(201)\nexpect(updatedUser).to.be.an('object')\nexpect(updatedUser._id).to.be.equal(targetUser._id)",
              "err": {},
              "uuid": "d5149428-e6af-47d3-adcb-014f067bde75",
              "parentUUID": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user - age",
              "fullTitle": "update user should update a user - age",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { age } = updateUserData\n\nconst response = await axios.put(`${API_URL}/api/updateinfo/${targetUser._id}`,{age})\nconst updatedUser = response.data\n\nexpect(response.status).to.be.equal(201)\nexpect(updatedUser).to.be.an('object')\nexpect(updatedUser._id).to.be.equal(targetUser._id)",
              "err": {},
              "uuid": "4f85ab13-a9d9-48ad-8c2f-abdfc7f53690",
              "parentUUID": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update a user - with a wrong id",
              "fullTitle": "update user should not update a user - with a wrong id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const wrongId=\"23abd\"\n    const response = await axios.put(`${API_URL}/api/updateinfo/${wrongId}`,{updateUserData})\n    \n    expect(response.status).not.to.be.equal(201)\n} catch (error) {\n    expect(error.response.status).to.be.equal(500)  \n}",
              "err": {},
              "uuid": "fcea4e02-7416-40be-a814-b271ef362db9",
              "parentUUID": "64be8a0f-57a6-4d94-805d-90eab3cfbaa0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccbd88ed-4691-4cec-a1dd-d29a62044d8c",
            "d5149428-e6af-47d3-adcb-014f067bde75",
            "4f85ab13-a9d9-48ad-8c2f-abdfc7f53690",
            "fcea4e02-7416-40be-a814-b271ef362db9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}